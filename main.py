import telebot
from telebot import types
import datetime
import db_interface

#Bot is made for Extreme sports club of the Higher School of Economics
#by Semyon Malykh
#https://vk.com/twilight_phantom
#malykhsm@gmail.com
#Uses pyTelegramBotAPI
#Actual version of Telegram Bot API - 3.5
#Bot gives an information about club itself and club events

token = '540230588:AAHL4lyAW1rKqSmzxF8b_-MxvBWCGOflD-Q'

bot = telebot.TeleBot(token)

#removes reply keyboard
@bot.message_handler(commands = ['wait'])
def wait(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, '–ï—Å–ª–∏ —è –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –≤–≤–µ–¥–∏ /hey', reply_markup=markup)

#awakes bot
@bot.message_handler(commands = ['hey'])
def awake(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    first_button = types.KeyboardButton('–ü—Ä–æ –≠–í–°')
    second_button = types.KeyboardButton('–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö')
    markup.row(first_button, second_button)
    bot.send_message(message.chat.id, '–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –≠–í–° –∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö', reply_markup=markup)

@bot.message_handler(func=lambda message: (message.text == '–ü—Ä–∏–≤–µ—Ç' or message.text == '–ø—Ä–∏–≤–µ—Ç'))
def awake_with_hello(message):
    markup = types.ReplyKeyboardMarkupReplyKeyboardMarkup(one_time_keyboard=True)
    first_button = types.KeyboardButton('–ü—Ä–æ –≠–í–°')
    second_button = types.KeyboardButton('–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö')
    markup.row(first_button, second_button)
    bot.send_message(message.chat.id, '–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –≠–í–° –∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö', reply_markup=markup)

#answer to /start command and first message also
@bot.message_handler(commands=['start'])
def hello(message):
    hello_world = ('–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è üòä\n'
                  '–Ø - –±–æ—Ç –∫–ª—É–±–∞ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –í–∏–¥—ã –°–ø–æ—Ä—Ç–∞ –í–®–≠\n'
                  '–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–µ–º –∫–ª—É–±–µ –∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º ‚õ∑üèáüèÑ\n'
                  '–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ ‚ñ∂Ô∏è\n'
                  '–†–∞–∑–±—É–¥–∏—Ç—å –º–µ–Ω—è –º–æ–∂–Ω–æ, –≤–≤–µ–¥—è /hey, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - ‚è∏Ô∏è\n'
                  '–ù–∞—á–Ω—ë–º?\n')
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    upper_button = types.KeyboardButton('–ü–æ–≥–Ω–∞–ª–∏! üíÉ')
    lower_button = types.KeyboardButton('–ù–µ —Å–µ–π—á–∞—Å ‚úãÔ∏è')
    markup.row(upper_button)
    markup.row(lower_button)
    bot.send_message(message.chat.id, hello_world, reply_markup=markup)
    if not db_interface.is_user_in_db(message.chat.id):
        db_interface.add_new_user(message.chat.id, ' ')

#answer to '–ù–µ —Å–µ–π—á–∞—Å'
@bot.message_handler(func=lambda message: (message.text == '–ù–µ —Å–µ–π—á–∞—Å ‚úãÔ∏è' ))
def not_now_reply(message):
    bot.send_message(message.chat.id, 'Ok! –ï—Å–ª–∏ —è –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –Ω–∞–±–µ—Ä–∏ /hey')

#answer to '–ü–æ–≥–Ω–∞–ª–∏'
@bot.message_handler(func=lambda message: (message.text == '–ü–æ–≥–Ω–∞–ª–∏! üíÉ' ))
def not_now_reply(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    first_button = types.KeyboardButton('–ü—Ä–æ –≠–í–°')
    second_button = types.KeyboardButton('–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö')
    markup.one_time_keyboard = True
    markup.row(first_button)
    markup.row(second_button)
    bot.send_message(message.chat.id, '–û —á—ë–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?', reply_markup=markup)

@bot.message_handler(func=lambda message: (message.text == '–ü—Ä–æ –≠–í–°' ))
def send_es_info(message):
    es_info = ('–¢–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏? ' 
               '–¢–æ–≥–¥–∞ –ö–ª—É–± –≠–í–° –æ—Ç–∫—Ä–æ–µ—Ç –¥–ª—è —Ç–µ–±—è —Ç–∞–∫–∏–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –∫–∞–∫:' 
               '–≤–æ–¥–Ω—ã–π —Ç—É—Ä–∏–∑–º, –≥–æ—Ä–Ω—ã–π —Ç—É—Ä–∏–∑–º, –ø–µ—à–∏–π —Ç—É—Ä–∏–∑–º, —Å–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ, –∞–ª—å–ø–∏–Ω–∏–∑–º, ' 
               '–≥–æ—Ä–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥, —Å–µ—Ä—Ñ–∏–Ω–≥, –¥–∞–π–≤–∏–Ω–≥, –∫–∞–π—Ç–∏–Ω–≥, –≤–µ—Ä—Ö–æ–≤–∞—è –µ–∑–¥–∞, –≥–æ—Ä–Ω—ã–µ –ª—ã–∂–∏, ' 
               '—Å–Ω–æ—É–±–æ—Ä–¥, —Å–∫–µ–π—Ç–∏–Ω–≥ –∏ —Ä–æ–ª–∏–∫–æ–≤—ã–µ –∫–æ–Ω—å–∫–∏, –ª–æ–Ω–≥–±–æ—Ä–¥, –ø–µ–π–Ω—Ç–±–æ–ª, –≤–µ–π–∫–±–æ—Ä–¥–∏–Ω–≥, ' 
               '–ø–∏—Ç–±–∞–π–∫ - –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞' 
               '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∫:' 
               'https://vk.com/xsportclub')
    bot.send_message(message.chat.id, es_info)
    bot.send_message(message.chat.id, '–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö - /events')

@bot.message_handler(func=lambda message: (message.text == '/more_events' or message.text == '–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö' or message.text == '/events' or message.text == '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è' or message.text == '/forthcoming_events'))
def send_events_info(message):
    events = db_interface.get_forthcoming_events()
    for id in events:
        event = db_interface.get_event_info(id)
        if event[4] > datetime.date.today():
            send = event[1] + '\n' + '–î–∞—Ç—ã: ' + event[4].strftime("%d/%m/%Y") + ' - ' + event[5].strftime("%d/%m/%Y") + '\n' + '–ú–µ—Å—Ç–æ: ' +event[3] + '\n' + '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - ' + event[7]
            bot.send_message(message.chat.id, send)

@bot.message_handler(func=lambda message: db_interface.event_is_in_db(message.text))
def send_events(message):
    event = db_interface.get_event_info_by_name(message.text)
    print(type(event), event)
    send = event[1] + '\n' + '–î–∞—Ç—ã: ' + event[4].strftime("%d/%m/%Y") +\
           ' - ' + event[5].strftime("%d/%m/%Y") + '\n' + '–ú–µ—Å—Ç–æ: ' + event[3] + '\n' +\
            '–û–ø–∏—Å–∞–Ω–∏–µ:\n' + event[2]
    bot.send_message(message.chat.id, send)
    bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è - /enroll_to_' + event[7][1:])
    bot.send_message(message.chat.id, '–ï—â—ë —Å–æ–±—ã—Ç–∏—è - /forthcoming_events')

#answer to thanks
@bot.message_handler(func=lambda message: (message.text == '–°–ø–∞—Å–∏–±–æ' or message.text == '—Å–ø–∞—Å–∏–±–æ'))
def echo_all(message):
    bot.send_message(message.chat.id, '–†–∞–¥ –ø–æ–º–æ—á—å! üòäÔ∏è')


@bot.message_handler(func=lambda message: ('/enroll_to' in message.text ))
def enroll_to_event(message):
    event_name = '/' + message.text[11:]
    event_id = db_interface.get_event_id_by_name(event_name)
    organizer_id = db_interface.get_event_organizer(event_id)
    if not db_interface.is_user_registred(message.chat.id, event_id):
        db_interface.enroll_user_to_event(message.chat.id, event_name)
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! ‚úÖ\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—à–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä')
        bot.send_message(message.chat.id, '–ï—â—ë —Å–æ–±—ã—Ç–∏—è - /forthcoming_events')
        bot.send_message(organizer_id, '–ù–∞ ' + event_name + ' –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫!\n–°–≤—è–∂–∏—Å—å —Å –Ω–∏–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ')
        bot.forward_message(organizer_id, message.chat.id, message.message_id)
    else:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')

#send_help
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —Ä–∞–∑–±—É–¥–∏—Ç—å –º–µ–Ω—è, –≤–≤–µ–¥–∏ /hey \n'
                                      '–ß—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –≤–≤–µ–¥–∏ /wait')

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏ /hey')

bot.polling()
